# Try to dump function types and parameters from an idb.
#
# Tavis Ormandy <taviso@gmail.com>, August 2022
#
# Note: I am not a python programmer, I usually use IDC! This may not be correct!
#

from idaapi import *

typemap = {
               'char':  '%char',
                'int':  '%int',
             'size_t':  '%size_t',
               'void':  '%void',
              '_WORD':  '%uint16_t',
    'unsigned __int8':  '%int8_t',
   'unsigned __int16':  '%uint16_t',
            '__int16':  '%int16_t',
       'unsigned int':  '%uint32_t',
             'double':  '%double',
            '__int64':  '%int64_t',
           'uint16_t':  '%uint16_t',
            '__off_t':  '%uint64_t',
         'signed int':  '%int32_t',
            '__pid_t':  '%uint32_t',
             '_DWORD':  '%uint32_t',
             'time_t':  '%uint32_t',
            '__uid_t':  '%uint32_t',
}

ptr         = ptr_type_data_t()
tif         = tinfo_t()
funcdata    = func_type_data_t()
func        = ida_funcs.get_next_func(0)

# Figure out how many *s we need
def derefstr(type):
    ptr  = ptr_type_data_t()
    pstr = ""

    while type.is_ptr():
        type.get_ptr_details(ptr)
        type = ptr.obj_type
        pstr += "*"

    return pstr

# Simplify any complex types
def simplify(type):
    ptr = ptr_type_data_t()

    while type.is_ptr():
        type.get_ptr_details(ptr)
        type = ptr.obj_type

    type.clr_const()
    type.clr_volatile()

    if str(type) in typemap:
        return typemap[str(type)]

    return "%void"

print("# Automatically Generated by ida2py")

while func is not None:
    fname = get_func_name(func.start_ea)

    # Filter any characters here.
    fname = fname.replace('.', '_')

    if get_tinfo(tif, func.start_ea) is not True:
        print("function %s, 0x%x, %%void" % (fname, func.start_ea))
        func = ida_funcs.get_next_func(func.start_ea)
        continue

    if tif.get_func_details(funcdata) is not True:
        print("get_func_details error")
        break

    print("function %s, 0x%x, %s %s"
        % (fname,
        func.start_ea,
        derefstr(tif.get_rettype()),
        simplify(tif.get_rettype())
        ))

    for arg in range(funcdata.size()):
        name = funcdata[arg].name
        pstr = derefstr(funcdata[arg].type)
        type = simplify(funcdata[arg].type)

        if type == "%void" and pstr == "":
            #print("Dont know type %s" % str(funcdata[arg].type))
            break

        # Handle unnamed parameters.
        if name == "":
           name = "arg" + str(arg)

        print("\tparam %s, %s %s" % (
              name,
              pstr,
              type
        ))

    func = ida_funcs.get_next_func(func.start_ea)
